import { db } from '../firebaseConfig.ts';
import { collection, addDoc, serverTimestamp, Timestamp } from 'firebase/firestore';
import { InputType, AnalysisResult, RiskRanking } from '../types.ts';

export interface SubmissionData {
  submissionId?: string; // Auto-generated by Firestore
  userId: string | null;
  text: string | null;
  url: string | null;
  timestamp: Timestamp; // Firestore serverTimestamp will resolve to Timestamp
  ranking: RiskRanking;
  explanation: string;
  feedbackCount: number;
  flags: number;
  verified: boolean;
  inputType: InputType; // To know if it was text or URL
}

export const saveSubmission = async (
  inputType: InputType,
  inputValue: string,
  analysis: AnalysisResult
): Promise<string> => {
  if (!db) {
    console.error("Firestore database instance is not available. Submission aborted.");
    throw new Error("Firestore not initialized.");
  }

  try {
    // Type assertion for serverTimestamp() as it's a sentinel value
    const submissionToSave: Omit<SubmissionData, 'submissionId' | 'timestamp'> & { timestamp: any } = {
      userId: null, // Placeholder: Implement user authentication for actual userId
      text: inputType === InputType.TEXT ? inputValue : null,
      url: inputType === InputType.URL ? inputValue : null,
      timestamp: serverTimestamp(), // Firestore will convert this to a Timestamp
      ranking: analysis.ranking,
      explanation: analysis.explanation,
      feedbackCount: 0,
      flags: 0,
      verified: false,
      inputType: inputType,
    };

    const docRef = await addDoc(collection(db, "submissions"), submissionToSave);
    console.log("Submission saved to Firestore with ID: ", docRef.id);
    return docRef.id;
  } catch (error) {
    console.error("Error saving submission to Firestore: ", error);
    // Propagate the error to be handled by the caller (e.g., display a UI message)
    throw error;
  }
};